
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 */

export type user = {
  id: number
  nama: string
  username: string
  email: string
  password: string
}

/**
 * Model book
 */

export type book = {
  id_buku: number
  judul: string
  pengarang: string
  penerbit: string
  ISBN: string
  deskripsi: string
  halaman: number
  foto: string
}

/**
 * Model kategori
 */

export type kategori = {
  id_kategori: number
  kategori: string
  foto: string
}

/**
 * Model pemijaman
 */

export type pemijaman = {
  id_pinjam: number
  tgl_pinjam: Date
  tgl_kembali: Date
  status: boolean | null
}

/**
 * Model rating
 */

export type rating = {
  id_rating: number
  rating: number
}

/**
 * Model diskusi
 */

export type diskusi = {
  id_diskusi: number
  diskusi: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.bookDelegate<GlobalReject>;

  /**
   * `prisma.kategori`: Exposes CRUD operations for the **kategori** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kategoris
    * const kategoris = await prisma.kategori.findMany()
    * ```
    */
  get kategori(): Prisma.kategoriDelegate<GlobalReject>;

  /**
   * `prisma.pemijaman`: Exposes CRUD operations for the **pemijaman** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pemijamen
    * const pemijamen = await prisma.pemijaman.findMany()
    * ```
    */
  get pemijaman(): Prisma.pemijamanDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.ratingDelegate<GlobalReject>;

  /**
   * `prisma.diskusi`: Exposes CRUD operations for the **diskusi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diskusis
    * const diskusis = await prisma.diskusi.findMany()
    * ```
    */
  get diskusi(): Prisma.diskusiDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user: 'user',
    book: 'book',
    kategori: 'kategori',
    pemijaman: 'pemijaman',
    rating: 'rating',
    diskusi: 'diskusi'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model user
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    nama: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    nama: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nama: number | null
    username: number | null
    email: number | null
    password: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type userSelect = {
    id?: boolean
    nama?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user ?user [P]
  : 
     never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Filter, which users to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * The data needed to create a user.
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * The data needed to update a user.
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * The filter to search for the user to update in case it exists.
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Filter which user to delete.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
  }



  /**
   * Model book
   */


  export type AggregateBook = {
    count: BookCountAggregateOutputType | null
    avg: BookAvgAggregateOutputType | null
    sum: BookSumAggregateOutputType | null
    min: BookMinAggregateOutputType | null
    max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id_buku: number
    halaman: number
  }

  export type BookSumAggregateOutputType = {
    id_buku: number
    halaman: number
  }

  export type BookMinAggregateOutputType = {
    id_buku: number
    judul: string | null
    pengarang: string | null
    penerbit: string | null
    ISBN: string | null
    deskripsi: string | null
    halaman: number
    foto: string | null
  }

  export type BookMaxAggregateOutputType = {
    id_buku: number
    judul: string | null
    pengarang: string | null
    penerbit: string | null
    ISBN: string | null
    deskripsi: string | null
    halaman: number
    foto: string | null
  }

  export type BookCountAggregateOutputType = {
    id_buku: number
    judul: number | null
    pengarang: number | null
    penerbit: number | null
    ISBN: number | null
    deskripsi: number | null
    halaman: number
    foto: number | null
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id_buku?: true
    halaman?: true
  }

  export type BookSumAggregateInputType = {
    id_buku?: true
    halaman?: true
  }

  export type BookMinAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    ISBN?: true
    deskripsi?: true
    halaman?: true
    foto?: true
  }

  export type BookMaxAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    ISBN?: true
    deskripsi?: true
    halaman?: true
    foto?: true
  }

  export type BookCountAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    ISBN?: true
    deskripsi?: true
    halaman?: true
    foto?: true
    _all?: true
  }

  export type BookAggregateArgs = {
    /**
     * Filter which book to aggregate.
    **/
    where?: bookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<bookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: bookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned books
    **/
    count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
    [P in keyof T & keyof AggregateBook]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }



  export type bookSelect = {
    id_buku?: boolean
    judul?: boolean
    pengarang?: boolean
    penerbit?: boolean
    ISBN?: boolean
    deskripsi?: boolean
    halaman?: boolean
    foto?: boolean
  }

  export type bookGetPayload<
    S extends boolean | null | undefined | bookArgs,
    U = keyof S
      > = S extends true
        ? book
    : S extends undefined
    ? never
    : S extends bookArgs | bookFindManyArgs
    ?'include' extends U
    ? book 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof book ?book [P]
  : 
     never
  } 
    : book
  : book


  type bookCountArgs = Merge<
    Omit<bookFindManyArgs, 'select' | 'include'> & {
      select?: BookCountAggregateInputType | true
    }
  >

  export interface bookDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Book that matches the filter.
     * @param {bookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'book'> extends True ? CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>> : CheckSelect<T, Prisma__bookClient<book | null >, Prisma__bookClient<bookGetPayload<T> | null >>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'book'> extends True ? CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>> : CheckSelect<T, Prisma__bookClient<book | null >, Prisma__bookClient<bookGetPayload<T> | null >>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id_buku`
     * const bookWithId_bukuOnly = await prisma.book.findMany({ select: { id_buku: true } })
     * 
    **/
    findMany<T extends bookFindManyArgs>(
      args?: SelectSubset<T, bookFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<book>>, PrismaPromise<Array<bookGetPayload<T>>>>

    /**
     * Create a Book.
     * @param {bookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
    **/
    create<T extends bookCreateArgs>(
      args: SelectSubset<T, bookCreateArgs>
    ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>

    /**
     * Delete a Book.
     * @param {bookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
    **/
    delete<T extends bookDeleteArgs>(
      args: SelectSubset<T, bookDeleteArgs>
    ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>

    /**
     * Update one Book.
     * @param {bookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bookUpdateArgs>(
      args: SelectSubset<T, bookUpdateArgs>
    ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>

    /**
     * Delete zero or more Books.
     * @param {bookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bookDeleteManyArgs>(
      args?: SelectSubset<T, bookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bookUpdateManyArgs>(
      args: SelectSubset<T, bookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {bookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
    **/
    upsert<T extends bookUpsertArgs>(
      args: SelectSubset<T, bookUpsertArgs>
    ): CheckSelect<T, Prisma__bookClient<book>, Prisma__bookClient<bookGetPayload<T>>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends bookCountArgs>(
      args?: Subset<T, bookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): PrismaPromise<GetBookAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bookClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * book findUnique
   */
  export type bookFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * Throw an Error if a book can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which book to fetch.
    **/
    where: bookWhereUniqueInput
  }


  /**
   * book findFirst
   */
  export type bookFindFirstArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * Throw an Error if a book can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which book to fetch.
    **/
    where?: bookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<bookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
    **/
    cursor?: bookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
    **/
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * book findMany
   */
  export type bookFindManyArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * Filter, which books to fetch.
    **/
    where?: bookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
    **/
    orderBy?: Enumerable<bookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing books.
    **/
    cursor?: bookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
    **/
    skip?: number
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * book create
   */
  export type bookCreateArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * The data needed to create a book.
    **/
    data: XOR<bookCreateInput, bookUncheckedCreateInput>
  }


  /**
   * book update
   */
  export type bookUpdateArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * The data needed to update a book.
    **/
    data: XOR<bookUpdateInput, bookUncheckedUpdateInput>
    /**
     * Choose, which book to update.
    **/
    where: bookWhereUniqueInput
  }


  /**
   * book updateMany
   */
  export type bookUpdateManyArgs = {
    data: XOR<bookUpdateManyMutationInput, bookUncheckedUpdateManyInput>
    where?: bookWhereInput
  }


  /**
   * book upsert
   */
  export type bookUpsertArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * The filter to search for the book to update in case it exists.
    **/
    where: bookWhereUniqueInput
    /**
     * In case the book found by the `where` argument doesn't exist, create a new book with this data.
    **/
    create: XOR<bookCreateInput, bookUncheckedCreateInput>
    /**
     * In case the book was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<bookUpdateInput, bookUncheckedUpdateInput>
  }


  /**
   * book delete
   */
  export type bookDeleteArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
    /**
     * Filter which book to delete.
    **/
    where: bookWhereUniqueInput
  }


  /**
   * book deleteMany
   */
  export type bookDeleteManyArgs = {
    where?: bookWhereInput
  }


  /**
   * book without action
   */
  export type bookArgs = {
    /**
     * Select specific fields to fetch from the book
    **/
    select?: bookSelect | null
  }



  /**
   * Model kategori
   */


  export type AggregateKategori = {
    count: KategoriCountAggregateOutputType | null
    avg: KategoriAvgAggregateOutputType | null
    sum: KategoriSumAggregateOutputType | null
    min: KategoriMinAggregateOutputType | null
    max: KategoriMaxAggregateOutputType | null
  }

  export type KategoriAvgAggregateOutputType = {
    id_kategori: number
  }

  export type KategoriSumAggregateOutputType = {
    id_kategori: number
  }

  export type KategoriMinAggregateOutputType = {
    id_kategori: number
    kategori: string | null
    foto: string | null
  }

  export type KategoriMaxAggregateOutputType = {
    id_kategori: number
    kategori: string | null
    foto: string | null
  }

  export type KategoriCountAggregateOutputType = {
    id_kategori: number
    kategori: number | null
    foto: number | null
    _all: number
  }


  export type KategoriAvgAggregateInputType = {
    id_kategori?: true
  }

  export type KategoriSumAggregateInputType = {
    id_kategori?: true
  }

  export type KategoriMinAggregateInputType = {
    id_kategori?: true
    kategori?: true
    foto?: true
  }

  export type KategoriMaxAggregateInputType = {
    id_kategori?: true
    kategori?: true
    foto?: true
  }

  export type KategoriCountAggregateInputType = {
    id_kategori?: true
    kategori?: true
    foto?: true
    _all?: true
  }

  export type KategoriAggregateArgs = {
    /**
     * Filter which kategori to aggregate.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kategoris
    **/
    count?: true | KategoriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: KategoriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: KategoriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: KategoriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: KategoriMaxAggregateInputType
  }

  export type GetKategoriAggregateType<T extends KategoriAggregateArgs> = {
    [P in keyof T & keyof AggregateKategori]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKategori[P]>
      : GetScalarType<T[P], AggregateKategori[P]>
  }



  export type kategoriSelect = {
    id_kategori?: boolean
    kategori?: boolean
    foto?: boolean
  }

  export type kategoriGetPayload<
    S extends boolean | null | undefined | kategoriArgs,
    U = keyof S
      > = S extends true
        ? kategori
    : S extends undefined
    ? never
    : S extends kategoriArgs | kategoriFindManyArgs
    ?'include' extends U
    ? kategori 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof kategori ?kategori [P]
  : 
     never
  } 
    : kategori
  : kategori


  type kategoriCountArgs = Merge<
    Omit<kategoriFindManyArgs, 'select' | 'include'> & {
      select?: KategoriCountAggregateInputType | true
    }
  >

  export interface kategoriDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Kategori that matches the filter.
     * @param {kategoriFindUniqueArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends kategoriFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, kategoriFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'kategori'> extends True ? CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>> : CheckSelect<T, Prisma__kategoriClient<kategori | null >, Prisma__kategoriClient<kategoriGetPayload<T> | null >>

    /**
     * Find the first Kategori that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriFindFirstArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends kategoriFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, kategoriFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'kategori'> extends True ? CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>> : CheckSelect<T, Prisma__kategoriClient<kategori | null >, Prisma__kategoriClient<kategoriGetPayload<T> | null >>

    /**
     * Find zero or more Kategoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kategoris
     * const kategoris = await prisma.kategori.findMany()
     * 
     * // Get first 10 Kategoris
     * const kategoris = await prisma.kategori.findMany({ take: 10 })
     * 
     * // Only select the `id_kategori`
     * const kategoriWithId_kategoriOnly = await prisma.kategori.findMany({ select: { id_kategori: true } })
     * 
    **/
    findMany<T extends kategoriFindManyArgs>(
      args?: SelectSubset<T, kategoriFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<kategori>>, PrismaPromise<Array<kategoriGetPayload<T>>>>

    /**
     * Create a Kategori.
     * @param {kategoriCreateArgs} args - Arguments to create a Kategori.
     * @example
     * // Create one Kategori
     * const Kategori = await prisma.kategori.create({
     *   data: {
     *     // ... data to create a Kategori
     *   }
     * })
     * 
    **/
    create<T extends kategoriCreateArgs>(
      args: SelectSubset<T, kategoriCreateArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Delete a Kategori.
     * @param {kategoriDeleteArgs} args - Arguments to delete one Kategori.
     * @example
     * // Delete one Kategori
     * const Kategori = await prisma.kategori.delete({
     *   where: {
     *     // ... filter to delete one Kategori
     *   }
     * })
     * 
    **/
    delete<T extends kategoriDeleteArgs>(
      args: SelectSubset<T, kategoriDeleteArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Update one Kategori.
     * @param {kategoriUpdateArgs} args - Arguments to update one Kategori.
     * @example
     * // Update one Kategori
     * const kategori = await prisma.kategori.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends kategoriUpdateArgs>(
      args: SelectSubset<T, kategoriUpdateArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Delete zero or more Kategoris.
     * @param {kategoriDeleteManyArgs} args - Arguments to filter Kategoris to delete.
     * @example
     * // Delete a few Kategoris
     * const { count } = await prisma.kategori.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends kategoriDeleteManyArgs>(
      args?: SelectSubset<T, kategoriDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kategoris
     * const kategori = await prisma.kategori.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends kategoriUpdateManyArgs>(
      args: SelectSubset<T, kategoriUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Kategori.
     * @param {kategoriUpsertArgs} args - Arguments to update or create a Kategori.
     * @example
     * // Update or create a Kategori
     * const kategori = await prisma.kategori.upsert({
     *   create: {
     *     // ... data to create a Kategori
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kategori we want to update
     *   }
     * })
    **/
    upsert<T extends kategoriUpsertArgs>(
      args: SelectSubset<T, kategoriUpsertArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Count the number of Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriCountArgs} args - Arguments to filter Kategoris to count.
     * @example
     * // Count the number of Kategoris
     * const count = await prisma.kategori.count({
     *   where: {
     *     // ... the filter for the Kategoris we want to count
     *   }
     * })
    **/
    count<T extends kategoriCountArgs>(
      args?: Subset<T, kategoriCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KategoriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kategori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KategoriAggregateArgs>(args: Subset<T, KategoriAggregateArgs>): PrismaPromise<GetKategoriAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for kategori.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__kategoriClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * kategori findUnique
   */
  export type kategoriFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Throw an Error if a kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kategori to fetch.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori findFirst
   */
  export type kategoriFindFirstArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Throw an Error if a kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kategori to fetch.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kategoris.
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kategoris.
    **/
    distinct?: Enumerable<KategoriScalarFieldEnum>
  }


  /**
   * kategori findMany
   */
  export type kategoriFindManyArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Filter, which kategoris to fetch.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kategoris.
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    distinct?: Enumerable<KategoriScalarFieldEnum>
  }


  /**
   * kategori create
   */
  export type kategoriCreateArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The data needed to create a kategori.
    **/
    data: XOR<kategoriCreateInput, kategoriUncheckedCreateInput>
  }


  /**
   * kategori update
   */
  export type kategoriUpdateArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The data needed to update a kategori.
    **/
    data: XOR<kategoriUpdateInput, kategoriUncheckedUpdateInput>
    /**
     * Choose, which kategori to update.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori updateMany
   */
  export type kategoriUpdateManyArgs = {
    data: XOR<kategoriUpdateManyMutationInput, kategoriUncheckedUpdateManyInput>
    where?: kategoriWhereInput
  }


  /**
   * kategori upsert
   */
  export type kategoriUpsertArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The filter to search for the kategori to update in case it exists.
    **/
    where: kategoriWhereUniqueInput
    /**
     * In case the kategori found by the `where` argument doesn't exist, create a new kategori with this data.
    **/
    create: XOR<kategoriCreateInput, kategoriUncheckedCreateInput>
    /**
     * In case the kategori was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<kategoriUpdateInput, kategoriUncheckedUpdateInput>
  }


  /**
   * kategori delete
   */
  export type kategoriDeleteArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Filter which kategori to delete.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori deleteMany
   */
  export type kategoriDeleteManyArgs = {
    where?: kategoriWhereInput
  }


  /**
   * kategori without action
   */
  export type kategoriArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
  }



  /**
   * Model pemijaman
   */


  export type AggregatePemijaman = {
    count: PemijamanCountAggregateOutputType | null
    avg: PemijamanAvgAggregateOutputType | null
    sum: PemijamanSumAggregateOutputType | null
    min: PemijamanMinAggregateOutputType | null
    max: PemijamanMaxAggregateOutputType | null
  }

  export type PemijamanAvgAggregateOutputType = {
    id_pinjam: number
  }

  export type PemijamanSumAggregateOutputType = {
    id_pinjam: number
  }

  export type PemijamanMinAggregateOutputType = {
    id_pinjam: number
    tgl_pinjam: Date | null
    tgl_kembali: Date | null
    status: boolean | null
  }

  export type PemijamanMaxAggregateOutputType = {
    id_pinjam: number
    tgl_pinjam: Date | null
    tgl_kembali: Date | null
    status: boolean | null
  }

  export type PemijamanCountAggregateOutputType = {
    id_pinjam: number
    tgl_pinjam: number | null
    tgl_kembali: number | null
    status: number | null
    _all: number
  }


  export type PemijamanAvgAggregateInputType = {
    id_pinjam?: true
  }

  export type PemijamanSumAggregateInputType = {
    id_pinjam?: true
  }

  export type PemijamanMinAggregateInputType = {
    id_pinjam?: true
    tgl_pinjam?: true
    tgl_kembali?: true
    status?: true
  }

  export type PemijamanMaxAggregateInputType = {
    id_pinjam?: true
    tgl_pinjam?: true
    tgl_kembali?: true
    status?: true
  }

  export type PemijamanCountAggregateInputType = {
    id_pinjam?: true
    tgl_pinjam?: true
    tgl_kembali?: true
    status?: true
    _all?: true
  }

  export type PemijamanAggregateArgs = {
    /**
     * Filter which pemijaman to aggregate.
    **/
    where?: pemijamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pemijamen to fetch.
    **/
    orderBy?: Enumerable<pemijamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: pemijamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pemijamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pemijamen.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pemijamen
    **/
    count?: true | PemijamanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PemijamanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PemijamanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PemijamanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PemijamanMaxAggregateInputType
  }

  export type GetPemijamanAggregateType<T extends PemijamanAggregateArgs> = {
    [P in keyof T & keyof AggregatePemijaman]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePemijaman[P]>
      : GetScalarType<T[P], AggregatePemijaman[P]>
  }



  export type pemijamanSelect = {
    id_pinjam?: boolean
    tgl_pinjam?: boolean
    tgl_kembali?: boolean
    status?: boolean
  }

  export type pemijamanGetPayload<
    S extends boolean | null | undefined | pemijamanArgs,
    U = keyof S
      > = S extends true
        ? pemijaman
    : S extends undefined
    ? never
    : S extends pemijamanArgs | pemijamanFindManyArgs
    ?'include' extends U
    ? pemijaman 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof pemijaman ?pemijaman [P]
  : 
     never
  } 
    : pemijaman
  : pemijaman


  type pemijamanCountArgs = Merge<
    Omit<pemijamanFindManyArgs, 'select' | 'include'> & {
      select?: PemijamanCountAggregateInputType | true
    }
  >

  export interface pemijamanDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pemijaman that matches the filter.
     * @param {pemijamanFindUniqueArgs} args - Arguments to find a Pemijaman
     * @example
     * // Get one Pemijaman
     * const pemijaman = await prisma.pemijaman.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pemijamanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pemijamanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pemijaman'> extends True ? CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>> : CheckSelect<T, Prisma__pemijamanClient<pemijaman | null >, Prisma__pemijamanClient<pemijamanGetPayload<T> | null >>

    /**
     * Find the first Pemijaman that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pemijamanFindFirstArgs} args - Arguments to find a Pemijaman
     * @example
     * // Get one Pemijaman
     * const pemijaman = await prisma.pemijaman.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pemijamanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pemijamanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pemijaman'> extends True ? CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>> : CheckSelect<T, Prisma__pemijamanClient<pemijaman | null >, Prisma__pemijamanClient<pemijamanGetPayload<T> | null >>

    /**
     * Find zero or more Pemijamen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pemijamanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pemijamen
     * const pemijamen = await prisma.pemijaman.findMany()
     * 
     * // Get first 10 Pemijamen
     * const pemijamen = await prisma.pemijaman.findMany({ take: 10 })
     * 
     * // Only select the `id_pinjam`
     * const pemijamanWithId_pinjamOnly = await prisma.pemijaman.findMany({ select: { id_pinjam: true } })
     * 
    **/
    findMany<T extends pemijamanFindManyArgs>(
      args?: SelectSubset<T, pemijamanFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<pemijaman>>, PrismaPromise<Array<pemijamanGetPayload<T>>>>

    /**
     * Create a Pemijaman.
     * @param {pemijamanCreateArgs} args - Arguments to create a Pemijaman.
     * @example
     * // Create one Pemijaman
     * const Pemijaman = await prisma.pemijaman.create({
     *   data: {
     *     // ... data to create a Pemijaman
     *   }
     * })
     * 
    **/
    create<T extends pemijamanCreateArgs>(
      args: SelectSubset<T, pemijamanCreateArgs>
    ): CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>>

    /**
     * Delete a Pemijaman.
     * @param {pemijamanDeleteArgs} args - Arguments to delete one Pemijaman.
     * @example
     * // Delete one Pemijaman
     * const Pemijaman = await prisma.pemijaman.delete({
     *   where: {
     *     // ... filter to delete one Pemijaman
     *   }
     * })
     * 
    **/
    delete<T extends pemijamanDeleteArgs>(
      args: SelectSubset<T, pemijamanDeleteArgs>
    ): CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>>

    /**
     * Update one Pemijaman.
     * @param {pemijamanUpdateArgs} args - Arguments to update one Pemijaman.
     * @example
     * // Update one Pemijaman
     * const pemijaman = await prisma.pemijaman.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pemijamanUpdateArgs>(
      args: SelectSubset<T, pemijamanUpdateArgs>
    ): CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>>

    /**
     * Delete zero or more Pemijamen.
     * @param {pemijamanDeleteManyArgs} args - Arguments to filter Pemijamen to delete.
     * @example
     * // Delete a few Pemijamen
     * const { count } = await prisma.pemijaman.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pemijamanDeleteManyArgs>(
      args?: SelectSubset<T, pemijamanDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pemijamen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pemijamanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pemijamen
     * const pemijaman = await prisma.pemijaman.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pemijamanUpdateManyArgs>(
      args: SelectSubset<T, pemijamanUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pemijaman.
     * @param {pemijamanUpsertArgs} args - Arguments to update or create a Pemijaman.
     * @example
     * // Update or create a Pemijaman
     * const pemijaman = await prisma.pemijaman.upsert({
     *   create: {
     *     // ... data to create a Pemijaman
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pemijaman we want to update
     *   }
     * })
    **/
    upsert<T extends pemijamanUpsertArgs>(
      args: SelectSubset<T, pemijamanUpsertArgs>
    ): CheckSelect<T, Prisma__pemijamanClient<pemijaman>, Prisma__pemijamanClient<pemijamanGetPayload<T>>>

    /**
     * Count the number of Pemijamen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pemijamanCountArgs} args - Arguments to filter Pemijamen to count.
     * @example
     * // Count the number of Pemijamen
     * const count = await prisma.pemijaman.count({
     *   where: {
     *     // ... the filter for the Pemijamen we want to count
     *   }
     * })
    **/
    count<T extends pemijamanCountArgs>(
      args?: Subset<T, pemijamanCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PemijamanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pemijaman.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PemijamanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PemijamanAggregateArgs>(args: Subset<T, PemijamanAggregateArgs>): PrismaPromise<GetPemijamanAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for pemijaman.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pemijamanClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pemijaman findUnique
   */
  export type pemijamanFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * Throw an Error if a pemijaman can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pemijaman to fetch.
    **/
    where: pemijamanWhereUniqueInput
  }


  /**
   * pemijaman findFirst
   */
  export type pemijamanFindFirstArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * Throw an Error if a pemijaman can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pemijaman to fetch.
    **/
    where?: pemijamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pemijamen to fetch.
    **/
    orderBy?: Enumerable<pemijamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pemijamen.
    **/
    cursor?: pemijamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pemijamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pemijamen.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pemijamen.
    **/
    distinct?: Enumerable<PemijamanScalarFieldEnum>
  }


  /**
   * pemijaman findMany
   */
  export type pemijamanFindManyArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * Filter, which pemijamen to fetch.
    **/
    where?: pemijamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pemijamen to fetch.
    **/
    orderBy?: Enumerable<pemijamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pemijamen.
    **/
    cursor?: pemijamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pemijamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pemijamen.
    **/
    skip?: number
    distinct?: Enumerable<PemijamanScalarFieldEnum>
  }


  /**
   * pemijaman create
   */
  export type pemijamanCreateArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * The data needed to create a pemijaman.
    **/
    data: XOR<pemijamanCreateInput, pemijamanUncheckedCreateInput>
  }


  /**
   * pemijaman update
   */
  export type pemijamanUpdateArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * The data needed to update a pemijaman.
    **/
    data: XOR<pemijamanUpdateInput, pemijamanUncheckedUpdateInput>
    /**
     * Choose, which pemijaman to update.
    **/
    where: pemijamanWhereUniqueInput
  }


  /**
   * pemijaman updateMany
   */
  export type pemijamanUpdateManyArgs = {
    data: XOR<pemijamanUpdateManyMutationInput, pemijamanUncheckedUpdateManyInput>
    where?: pemijamanWhereInput
  }


  /**
   * pemijaman upsert
   */
  export type pemijamanUpsertArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * The filter to search for the pemijaman to update in case it exists.
    **/
    where: pemijamanWhereUniqueInput
    /**
     * In case the pemijaman found by the `where` argument doesn't exist, create a new pemijaman with this data.
    **/
    create: XOR<pemijamanCreateInput, pemijamanUncheckedCreateInput>
    /**
     * In case the pemijaman was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<pemijamanUpdateInput, pemijamanUncheckedUpdateInput>
  }


  /**
   * pemijaman delete
   */
  export type pemijamanDeleteArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
    /**
     * Filter which pemijaman to delete.
    **/
    where: pemijamanWhereUniqueInput
  }


  /**
   * pemijaman deleteMany
   */
  export type pemijamanDeleteManyArgs = {
    where?: pemijamanWhereInput
  }


  /**
   * pemijaman without action
   */
  export type pemijamanArgs = {
    /**
     * Select specific fields to fetch from the pemijaman
    **/
    select?: pemijamanSelect | null
  }



  /**
   * Model rating
   */


  export type AggregateRating = {
    count: RatingCountAggregateOutputType | null
    avg: RatingAvgAggregateOutputType | null
    sum: RatingSumAggregateOutputType | null
    min: RatingMinAggregateOutputType | null
    max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id_rating: number
    rating: number
  }

  export type RatingSumAggregateOutputType = {
    id_rating: number
    rating: number
  }

  export type RatingMinAggregateOutputType = {
    id_rating: number
    rating: number
  }

  export type RatingMaxAggregateOutputType = {
    id_rating: number
    rating: number
  }

  export type RatingCountAggregateOutputType = {
    id_rating: number
    rating: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id_rating?: true
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    id_rating?: true
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id_rating?: true
    rating?: true
  }

  export type RatingMaxAggregateInputType = {
    id_rating?: true
    rating?: true
  }

  export type RatingCountAggregateInputType = {
    id_rating?: true
    rating?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which rating to aggregate.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ratings
    **/
    count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
    [P in keyof T & keyof AggregateRating]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }



  export type ratingSelect = {
    id_rating?: boolean
    rating?: boolean
  }

  export type ratingGetPayload<
    S extends boolean | null | undefined | ratingArgs,
    U = keyof S
      > = S extends true
        ? rating
    : S extends undefined
    ? never
    : S extends ratingArgs | ratingFindManyArgs
    ?'include' extends U
    ? rating 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rating ?rating [P]
  : 
     never
  } 
    : rating
  : rating


  type ratingCountArgs = Merge<
    Omit<ratingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }
  >

  export interface ratingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Rating that matches the filter.
     * @param {ratingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ratingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ratingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ratingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ratingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rating'> extends True ? CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>> : CheckSelect<T, Prisma__ratingClient<rating | null >, Prisma__ratingClient<ratingGetPayload<T> | null >>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id_rating`
     * const ratingWithId_ratingOnly = await prisma.rating.findMany({ select: { id_rating: true } })
     * 
    **/
    findMany<T extends ratingFindManyArgs>(
      args?: SelectSubset<T, ratingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rating>>, PrismaPromise<Array<ratingGetPayload<T>>>>

    /**
     * Create a Rating.
     * @param {ratingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends ratingCreateArgs>(
      args: SelectSubset<T, ratingCreateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete a Rating.
     * @param {ratingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends ratingDeleteArgs>(
      args: SelectSubset<T, ratingDeleteArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Update one Rating.
     * @param {ratingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ratingUpdateArgs>(
      args: SelectSubset<T, ratingUpdateArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Delete zero or more Ratings.
     * @param {ratingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ratingDeleteManyArgs>(
      args?: SelectSubset<T, ratingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ratingUpdateManyArgs>(
      args: SelectSubset<T, ratingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {ratingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends ratingUpsertArgs>(
      args: SelectSubset<T, ratingUpsertArgs>
    ): CheckSelect<T, Prisma__ratingClient<rating>, Prisma__ratingClient<ratingGetPayload<T>>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends ratingCountArgs>(
      args?: Subset<T, ratingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): PrismaPromise<GetRatingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ratingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rating findUnique
   */
  export type ratingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating findFirst
   */
  export type ratingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Throw an Error if a rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rating to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
    **/
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating findMany
   */
  export type ratingFindManyArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Filter, which ratings to fetch.
    **/
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
    **/
    orderBy?: Enumerable<ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ratings.
    **/
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
    **/
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * rating create
   */
  export type ratingCreateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * The data needed to create a rating.
    **/
    data: XOR<ratingCreateInput, ratingUncheckedCreateInput>
  }


  /**
   * rating update
   */
  export type ratingUpdateArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * The data needed to update a rating.
    **/
    data: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
    /**
     * Choose, which rating to update.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating updateMany
   */
  export type ratingUpdateManyArgs = {
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    where?: ratingWhereInput
  }


  /**
   * rating upsert
   */
  export type ratingUpsertArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * The filter to search for the rating to update in case it exists.
    **/
    where: ratingWhereUniqueInput
    /**
     * In case the rating found by the `where` argument doesn't exist, create a new rating with this data.
    **/
    create: XOR<ratingCreateInput, ratingUncheckedCreateInput>
    /**
     * In case the rating was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
  }


  /**
   * rating delete
   */
  export type ratingDeleteArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
    /**
     * Filter which rating to delete.
    **/
    where: ratingWhereUniqueInput
  }


  /**
   * rating deleteMany
   */
  export type ratingDeleteManyArgs = {
    where?: ratingWhereInput
  }


  /**
   * rating without action
   */
  export type ratingArgs = {
    /**
     * Select specific fields to fetch from the rating
    **/
    select?: ratingSelect | null
  }



  /**
   * Model diskusi
   */


  export type AggregateDiskusi = {
    count: DiskusiCountAggregateOutputType | null
    avg: DiskusiAvgAggregateOutputType | null
    sum: DiskusiSumAggregateOutputType | null
    min: DiskusiMinAggregateOutputType | null
    max: DiskusiMaxAggregateOutputType | null
  }

  export type DiskusiAvgAggregateOutputType = {
    id_diskusi: number
  }

  export type DiskusiSumAggregateOutputType = {
    id_diskusi: number
  }

  export type DiskusiMinAggregateOutputType = {
    id_diskusi: number
    diskusi: string | null
  }

  export type DiskusiMaxAggregateOutputType = {
    id_diskusi: number
    diskusi: string | null
  }

  export type DiskusiCountAggregateOutputType = {
    id_diskusi: number
    diskusi: number | null
    _all: number
  }


  export type DiskusiAvgAggregateInputType = {
    id_diskusi?: true
  }

  export type DiskusiSumAggregateInputType = {
    id_diskusi?: true
  }

  export type DiskusiMinAggregateInputType = {
    id_diskusi?: true
    diskusi?: true
  }

  export type DiskusiMaxAggregateInputType = {
    id_diskusi?: true
    diskusi?: true
  }

  export type DiskusiCountAggregateInputType = {
    id_diskusi?: true
    diskusi?: true
    _all?: true
  }

  export type DiskusiAggregateArgs = {
    /**
     * Filter which diskusi to aggregate.
    **/
    where?: diskusiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diskusis to fetch.
    **/
    orderBy?: Enumerable<diskusiOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: diskusiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diskusis from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diskusis.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned diskusis
    **/
    count?: true | DiskusiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DiskusiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DiskusiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DiskusiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DiskusiMaxAggregateInputType
  }

  export type GetDiskusiAggregateType<T extends DiskusiAggregateArgs> = {
    [P in keyof T & keyof AggregateDiskusi]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiskusi[P]>
      : GetScalarType<T[P], AggregateDiskusi[P]>
  }



  export type diskusiSelect = {
    id_diskusi?: boolean
    diskusi?: boolean
  }

  export type diskusiGetPayload<
    S extends boolean | null | undefined | diskusiArgs,
    U = keyof S
      > = S extends true
        ? diskusi
    : S extends undefined
    ? never
    : S extends diskusiArgs | diskusiFindManyArgs
    ?'include' extends U
    ? diskusi 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof diskusi ?diskusi [P]
  : 
     never
  } 
    : diskusi
  : diskusi


  type diskusiCountArgs = Merge<
    Omit<diskusiFindManyArgs, 'select' | 'include'> & {
      select?: DiskusiCountAggregateInputType | true
    }
  >

  export interface diskusiDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Diskusi that matches the filter.
     * @param {diskusiFindUniqueArgs} args - Arguments to find a Diskusi
     * @example
     * // Get one Diskusi
     * const diskusi = await prisma.diskusi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends diskusiFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, diskusiFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'diskusi'> extends True ? CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>> : CheckSelect<T, Prisma__diskusiClient<diskusi | null >, Prisma__diskusiClient<diskusiGetPayload<T> | null >>

    /**
     * Find the first Diskusi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diskusiFindFirstArgs} args - Arguments to find a Diskusi
     * @example
     * // Get one Diskusi
     * const diskusi = await prisma.diskusi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends diskusiFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, diskusiFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'diskusi'> extends True ? CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>> : CheckSelect<T, Prisma__diskusiClient<diskusi | null >, Prisma__diskusiClient<diskusiGetPayload<T> | null >>

    /**
     * Find zero or more Diskusis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diskusiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diskusis
     * const diskusis = await prisma.diskusi.findMany()
     * 
     * // Get first 10 Diskusis
     * const diskusis = await prisma.diskusi.findMany({ take: 10 })
     * 
     * // Only select the `id_diskusi`
     * const diskusiWithId_diskusiOnly = await prisma.diskusi.findMany({ select: { id_diskusi: true } })
     * 
    **/
    findMany<T extends diskusiFindManyArgs>(
      args?: SelectSubset<T, diskusiFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<diskusi>>, PrismaPromise<Array<diskusiGetPayload<T>>>>

    /**
     * Create a Diskusi.
     * @param {diskusiCreateArgs} args - Arguments to create a Diskusi.
     * @example
     * // Create one Diskusi
     * const Diskusi = await prisma.diskusi.create({
     *   data: {
     *     // ... data to create a Diskusi
     *   }
     * })
     * 
    **/
    create<T extends diskusiCreateArgs>(
      args: SelectSubset<T, diskusiCreateArgs>
    ): CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>>

    /**
     * Delete a Diskusi.
     * @param {diskusiDeleteArgs} args - Arguments to delete one Diskusi.
     * @example
     * // Delete one Diskusi
     * const Diskusi = await prisma.diskusi.delete({
     *   where: {
     *     // ... filter to delete one Diskusi
     *   }
     * })
     * 
    **/
    delete<T extends diskusiDeleteArgs>(
      args: SelectSubset<T, diskusiDeleteArgs>
    ): CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>>

    /**
     * Update one Diskusi.
     * @param {diskusiUpdateArgs} args - Arguments to update one Diskusi.
     * @example
     * // Update one Diskusi
     * const diskusi = await prisma.diskusi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends diskusiUpdateArgs>(
      args: SelectSubset<T, diskusiUpdateArgs>
    ): CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>>

    /**
     * Delete zero or more Diskusis.
     * @param {diskusiDeleteManyArgs} args - Arguments to filter Diskusis to delete.
     * @example
     * // Delete a few Diskusis
     * const { count } = await prisma.diskusi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends diskusiDeleteManyArgs>(
      args?: SelectSubset<T, diskusiDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diskusis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diskusiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diskusis
     * const diskusi = await prisma.diskusi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends diskusiUpdateManyArgs>(
      args: SelectSubset<T, diskusiUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Diskusi.
     * @param {diskusiUpsertArgs} args - Arguments to update or create a Diskusi.
     * @example
     * // Update or create a Diskusi
     * const diskusi = await prisma.diskusi.upsert({
     *   create: {
     *     // ... data to create a Diskusi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diskusi we want to update
     *   }
     * })
    **/
    upsert<T extends diskusiUpsertArgs>(
      args: SelectSubset<T, diskusiUpsertArgs>
    ): CheckSelect<T, Prisma__diskusiClient<diskusi>, Prisma__diskusiClient<diskusiGetPayload<T>>>

    /**
     * Count the number of Diskusis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diskusiCountArgs} args - Arguments to filter Diskusis to count.
     * @example
     * // Count the number of Diskusis
     * const count = await prisma.diskusi.count({
     *   where: {
     *     // ... the filter for the Diskusis we want to count
     *   }
     * })
    **/
    count<T extends diskusiCountArgs>(
      args?: Subset<T, diskusiCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiskusiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diskusi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiskusiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiskusiAggregateArgs>(args: Subset<T, DiskusiAggregateArgs>): PrismaPromise<GetDiskusiAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for diskusi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__diskusiClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * diskusi findUnique
   */
  export type diskusiFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * Throw an Error if a diskusi can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which diskusi to fetch.
    **/
    where: diskusiWhereUniqueInput
  }


  /**
   * diskusi findFirst
   */
  export type diskusiFindFirstArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * Throw an Error if a diskusi can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which diskusi to fetch.
    **/
    where?: diskusiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diskusis to fetch.
    **/
    orderBy?: Enumerable<diskusiOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for diskusis.
    **/
    cursor?: diskusiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diskusis from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diskusis.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of diskusis.
    **/
    distinct?: Enumerable<DiskusiScalarFieldEnum>
  }


  /**
   * diskusi findMany
   */
  export type diskusiFindManyArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * Filter, which diskusis to fetch.
    **/
    where?: diskusiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diskusis to fetch.
    **/
    orderBy?: Enumerable<diskusiOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing diskusis.
    **/
    cursor?: diskusiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diskusis from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diskusis.
    **/
    skip?: number
    distinct?: Enumerable<DiskusiScalarFieldEnum>
  }


  /**
   * diskusi create
   */
  export type diskusiCreateArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * The data needed to create a diskusi.
    **/
    data: XOR<diskusiCreateInput, diskusiUncheckedCreateInput>
  }


  /**
   * diskusi update
   */
  export type diskusiUpdateArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * The data needed to update a diskusi.
    **/
    data: XOR<diskusiUpdateInput, diskusiUncheckedUpdateInput>
    /**
     * Choose, which diskusi to update.
    **/
    where: diskusiWhereUniqueInput
  }


  /**
   * diskusi updateMany
   */
  export type diskusiUpdateManyArgs = {
    data: XOR<diskusiUpdateManyMutationInput, diskusiUncheckedUpdateManyInput>
    where?: diskusiWhereInput
  }


  /**
   * diskusi upsert
   */
  export type diskusiUpsertArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * The filter to search for the diskusi to update in case it exists.
    **/
    where: diskusiWhereUniqueInput
    /**
     * In case the diskusi found by the `where` argument doesn't exist, create a new diskusi with this data.
    **/
    create: XOR<diskusiCreateInput, diskusiUncheckedCreateInput>
    /**
     * In case the diskusi was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<diskusiUpdateInput, diskusiUncheckedUpdateInput>
  }


  /**
   * diskusi delete
   */
  export type diskusiDeleteArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
    /**
     * Filter which diskusi to delete.
    **/
    where: diskusiWhereUniqueInput
  }


  /**
   * diskusi deleteMany
   */
  export type diskusiDeleteManyArgs = {
    where?: diskusiWhereInput
  }


  /**
   * diskusi without action
   */
  export type diskusiArgs = {
    /**
     * Select specific fields to fetch from the diskusi
    **/
    select?: diskusiSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id_buku: 'id_buku',
    judul: 'judul',
    pengarang: 'pengarang',
    penerbit: 'penerbit',
    ISBN: 'ISBN',
    deskripsi: 'deskripsi',
    halaman: 'halaman',
    foto: 'foto'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const KategoriScalarFieldEnum: {
    id_kategori: 'id_kategori',
    kategori: 'kategori',
    foto: 'foto'
  };

  export type KategoriScalarFieldEnum = (typeof KategoriScalarFieldEnum)[keyof typeof KategoriScalarFieldEnum]


  export const PemijamanScalarFieldEnum: {
    id_pinjam: 'id_pinjam',
    tgl_pinjam: 'tgl_pinjam',
    tgl_kembali: 'tgl_kembali',
    status: 'status'
  };

  export type PemijamanScalarFieldEnum = (typeof PemijamanScalarFieldEnum)[keyof typeof PemijamanScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id_rating: 'id_rating',
    rating: 'rating'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const DiskusiScalarFieldEnum: {
    id_diskusi: 'id_diskusi',
    diskusi: 'diskusi'
  };

  export type DiskusiScalarFieldEnum = (typeof DiskusiScalarFieldEnum)[keyof typeof DiskusiScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    nama?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type userOrderByInput = {
    id?: SortOrder
    nama?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type userWhereUniqueInput = {
    id?: number
  }

  export type bookWhereInput = {
    AND?: Enumerable<bookWhereInput>
    OR?: Enumerable<bookWhereInput>
    NOT?: Enumerable<bookWhereInput>
    id_buku?: IntFilter | number
    judul?: StringFilter | string
    pengarang?: StringFilter | string
    penerbit?: StringFilter | string
    ISBN?: StringFilter | string
    deskripsi?: StringFilter | string
    halaman?: IntFilter | number
    foto?: StringFilter | string
  }

  export type bookOrderByInput = {
    id_buku?: SortOrder
    judul?: SortOrder
    pengarang?: SortOrder
    penerbit?: SortOrder
    ISBN?: SortOrder
    deskripsi?: SortOrder
    halaman?: SortOrder
    foto?: SortOrder
  }

  export type bookWhereUniqueInput = {
    id_buku?: number
  }

  export type kategoriWhereInput = {
    AND?: Enumerable<kategoriWhereInput>
    OR?: Enumerable<kategoriWhereInput>
    NOT?: Enumerable<kategoriWhereInput>
    id_kategori?: IntFilter | number
    kategori?: StringFilter | string
    foto?: StringFilter | string
  }

  export type kategoriOrderByInput = {
    id_kategori?: SortOrder
    kategori?: SortOrder
    foto?: SortOrder
  }

  export type kategoriWhereUniqueInput = {
    id_kategori?: number
  }

  export type pemijamanWhereInput = {
    AND?: Enumerable<pemijamanWhereInput>
    OR?: Enumerable<pemijamanWhereInput>
    NOT?: Enumerable<pemijamanWhereInput>
    id_pinjam?: IntFilter | number
    tgl_pinjam?: DateTimeFilter | Date | string
    tgl_kembali?: DateTimeFilter | Date | string
    status?: BoolNullableFilter | boolean | null
  }

  export type pemijamanOrderByInput = {
    id_pinjam?: SortOrder
    tgl_pinjam?: SortOrder
    tgl_kembali?: SortOrder
    status?: SortOrder
  }

  export type pemijamanWhereUniqueInput = {
    id_pinjam?: number
  }

  export type ratingWhereInput = {
    AND?: Enumerable<ratingWhereInput>
    OR?: Enumerable<ratingWhereInput>
    NOT?: Enumerable<ratingWhereInput>
    id_rating?: IntFilter | number
    rating?: IntFilter | number
  }

  export type ratingOrderByInput = {
    id_rating?: SortOrder
    rating?: SortOrder
  }

  export type ratingWhereUniqueInput = {
    id_rating?: number
  }

  export type diskusiWhereInput = {
    AND?: Enumerable<diskusiWhereInput>
    OR?: Enumerable<diskusiWhereInput>
    NOT?: Enumerable<diskusiWhereInput>
    id_diskusi?: IntFilter | number
    diskusi?: StringFilter | string
  }

  export type diskusiOrderByInput = {
    id_diskusi?: SortOrder
    diskusi?: SortOrder
  }

  export type diskusiWhereUniqueInput = {
    id_diskusi?: number
  }

  export type userCreateInput = {
    nama: string
    username: string
    email: string
    password: string
  }

  export type userUncheckedCreateInput = {
    id?: number
    nama: string
    username: string
    email: string
    password: string
  }

  export type userUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type bookCreateInput = {
    judul: string
    pengarang: string
    penerbit: string
    ISBN: string
    deskripsi: string
    halaman: number
    foto: string
  }

  export type bookUncheckedCreateInput = {
    id_buku?: number
    judul: string
    pengarang: string
    penerbit: string
    ISBN: string
    deskripsi: string
    halaman: number
    foto: string
  }

  export type bookUpdateInput = {
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    ISBN?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    halaman?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type bookUncheckedUpdateInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    ISBN?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    halaman?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type bookUpdateManyMutationInput = {
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    ISBN?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    halaman?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type bookUncheckedUpdateManyInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    ISBN?: StringFieldUpdateOperationsInput | string
    deskripsi?: StringFieldUpdateOperationsInput | string
    halaman?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriCreateInput = {
    kategori: string
    foto: string
  }

  export type kategoriUncheckedCreateInput = {
    id_kategori?: number
    kategori: string
    foto: string
  }

  export type kategoriUpdateInput = {
    kategori?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUncheckedUpdateInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    kategori?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUpdateManyMutationInput = {
    kategori?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUncheckedUpdateManyInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    kategori?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type pemijamanCreateInput = {
    tgl_pinjam: Date | string
    tgl_kembali: Date | string
    status?: boolean | null
  }

  export type pemijamanUncheckedCreateInput = {
    id_pinjam?: number
    tgl_pinjam: Date | string
    tgl_kembali: Date | string
    status?: boolean | null
  }

  export type pemijamanUpdateInput = {
    tgl_pinjam?: DateTimeFieldUpdateOperationsInput | Date | string
    tgl_kembali?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type pemijamanUncheckedUpdateInput = {
    id_pinjam?: IntFieldUpdateOperationsInput | number
    tgl_pinjam?: DateTimeFieldUpdateOperationsInput | Date | string
    tgl_kembali?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type pemijamanUpdateManyMutationInput = {
    tgl_pinjam?: DateTimeFieldUpdateOperationsInput | Date | string
    tgl_kembali?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type pemijamanUncheckedUpdateManyInput = {
    id_pinjam?: IntFieldUpdateOperationsInput | number
    tgl_pinjam?: DateTimeFieldUpdateOperationsInput | Date | string
    tgl_kembali?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ratingCreateInput = {
    rating: number
  }

  export type ratingUncheckedCreateInput = {
    id_rating?: number
    rating: number
  }

  export type ratingUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type ratingUncheckedUpdateInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type ratingUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type ratingUncheckedUpdateManyInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type diskusiCreateInput = {
    diskusi: string
  }

  export type diskusiUncheckedCreateInput = {
    id_diskusi?: number
    diskusi: string
  }

  export type diskusiUpdateInput = {
    diskusi?: StringFieldUpdateOperationsInput | string
  }

  export type diskusiUncheckedUpdateInput = {
    id_diskusi?: IntFieldUpdateOperationsInput | number
    diskusi?: StringFieldUpdateOperationsInput | string
  }

  export type diskusiUpdateManyMutationInput = {
    diskusi?: StringFieldUpdateOperationsInput | string
  }

  export type diskusiUncheckedUpdateManyInput = {
    id_diskusi?: IntFieldUpdateOperationsInput | number
    diskusi?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}